#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/time.h>
#include "datetime/gettimeofdayfp.c"


int VERBOSE=0;
double  start, end;
double diff,g_tot=0, c_tot=0;
typedef unsigned u4;

#define  TY u4
#define  S_VAL_T TY
#define  S_IDX_T unsigned long
#define  S_LESS(x,y)   ((x) < (y))
#define  S_LESSEQ(x,y) ((x) <= (y))
#define  S_EQ(x,y)     ((x) == (y))
#define  S_(x)          u4_sort_ ## x
#define  S_SORT         u4_sort
#include "sort.c"

int u4cmp(const void *a, const void *b) {
    u4 A = *(const u4 *)a, B = *(const u4 *)b;
    return (int) (A - B);
}

int checkWork(const TY *a, const size_t M, const char* label) {
    int i=0,j=0;
    for (i = 1; i < M; i++) {
        if (a[i-1] > a[i]) {
            fprintf (stderr,"%s: %zd -- failure at offset %zd\n", label , M, i);
            for (j=0; j < M;j++)
                printf("%d ",a[j]);
            printf("\n"); 
            return 1;
        }
    }
    return 0;
}

int main(int ac, char **av) {
    u4  i,j, trial, TRIALS = getenv("TRIALS") ? atoi(getenv("TRIALS")) : 21;
    u4  *orig = (u4*)calloc(strtoul(av[1],NULL,10), 4);
    u4  *a    = (u4*)calloc(strtoul(av[1],NULL,10), 4);
    float dt = 0;
    unsigned long  M = atoi(av[1]);
    printf("testing: %ld\n", M);
    for (trial = 0; trial < TRIALS; trial++) {
        for (i = 0; i < M; i++) /* generate random data */
            orig[i] = random();
        
        /* GNU qsort testing section */
        memcpy(a,orig,sizeof(u4)*M);  
        if (gettimeofdayfp(&start,NULL)) 
            fprintf(stderr,"time error: %s.\n",strerror(errno)), exit(1);
        qsort((void *)a, M, sizeof *a, u4cmp);
        if (trial) { /* drop cold cache tm */
            if (gettimeofdayfp(&end,NULL)) 
                fprintf(stderr,"time error: %s.\n",strerror(errno)), exit(1);
            g_tot += end - start;
        }
        if (checkWork(a,M,"GNU qsort\n")) exit(1);
        
        /* now for cb testing section */
        memcpy(a,orig,sizeof(u4)*M); 
        if (gettimeofdayfp(&start,NULL)) 
            fprintf(stderr,"time error: %s.\n",strerror(errno)), exit(1);
        u4_sort((void *)a, M);
        if (trial) { /* drop cold cache tm */
            if (gettimeofdayfp(&end,NULL)) 
                fprintf(stderr,"time error: %s.\n",strerror(errno)), exit(1);
            c_tot += end - start;
            }
        if (checkWork(a,M,"CB sort")) exit(2);
    }
    
    printf("elts: %10d  GNU sec:%7.7f  CB sec:%7.7f\n", M, g_tot / (float)(TRIALS - 1), c_tot / (float)(TRIALS - 1));
    
    return 0;
}
